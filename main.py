from fastapi import FastAPI, File, UploadFile, Query, HTTPException
import google.generativeai as genai
import pdfplumber
from typing import List

app = FastAPI()

# Configure Google Gemini API
API_KEY = "AIzaSyCgiobpaQEnRO3zVdu2CyHmQxxp89v49Qc"  # Replace with your actual API key
genai.configure(api_key=API_KEY)

# Initialize the model
model = genai.GenerativeModel("gemini-pro")

@app.get("/search/")
def search_query(query: str = Query(..., description="The query to search for")):
    try:
        # Get main response
        response = model.generate_content(query)
        if not response:
            raise HTTPException(status_code=500, detail="No response from Gemini API.")
        main_answer = response.text

        # Generate follow-up questions
        followup_prompt = f"Suggest 3 follow-up questions related to: {query}"
        followup_response = model.generate_content(followup_prompt)

        if followup_response and followup_response.text:
            followup_questions = followup_response.text.split("\n")[:3]  # Extract first 3 lines
        else:
            followup_questions = ["No follow-ups available."]

        return {
            "query": query,
            "answer": main_answer,
            "also_asked": followup_questions,
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/upload-pdf/")
async def upload_pdf(file: UploadFile = File(...)):
    try:
        # Log file details for debugging
        print(f"Uploaded file: {file.filename}, size: {file.size} bytes")

        # Extract text from the uploaded PDF
        text = ""
        with pdfplumber.open(file.file) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text

        if not text:
            raise HTTPException(status_code=400, detail="No text could be extracted from the PDF.")

        # Summarize the text using Gemini API
        summary_prompt = f"Summarize the following text in 150 words:\n{text}"
        summary_response = model.generate_content(summary_prompt)
        if not summary_response:
            raise HTTPException(status_code=500, detail="No summary generated by Gemini API.")
        summary = summary_response.text

        # Generate FAQ questions based on the summary
        faq_prompt = f"Generate 5 FAQ questions based on the following summary:\n{summary}"
        faq_response = model.generate_content(faq_prompt)

        if faq_response and faq_response.text:
            faq_questions = faq_response.text.split("\n")[:5]  # Extract first 5 lines
        else:
            faq_questions = ["No FAQ questions available."]

        return {
            "summary": summary,
            "faq_questions": faq_questions,
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))